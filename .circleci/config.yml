version: 2.1

orbs:
  slack: circleci/slack@4.4.2

slack-notify-deploy-fail: &slack-notify-deploy-fail
      event: fail
      mentions: '@andrenoberto'
      template: basic_fail_1

slack-notify-deploy-success: &slack-notify-deploy-success
      event: pass
      template: success_tagged_deploy_1

slack-notify-job-fail: &slack-notify-job-fail
      event: fail
      mentions: '@andrenoberto'
      template: basic_fail_1

slack-notify-job-success: &slack-notify-job-success
      event: pass
      template: basic_success_1

alpine-image: &alpine-image
  docker:
    - image: alpine:latest

aws-cli: &aws-cli
  docker:
    - image: amazon/aws-cli

default-image: &default-image
  docker:
    - image: python:3.7-alpine3.12

nodejs-image: &nodejs-image
  docker:
    - image: circleci/node:13.8.0

commands:
  delete-unsuccessful-stack:
    description: Deletes the specified stack when the deploy step has not succeeded
    parameters:
      stackName:
        type: string
    steps:
      - run: 
          command: aws cloudformation delete-stack --stack-name << parameters.stackName >>
          when: on_fail
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1
  install-dependencies:
    description: Install all missing dependencies
    steps:
      - run:
          name: Install all missing dependencies
          command: |
            yum clean all
            yum update -y
            yum install tar gzip jq -y
  save-key-to-mem-stash:
    description: Saves a key into MemStash
    parameters:
      keyName:
        type: string
      keyValue:
        type: string
    steps:
      - run:
          name: Save key to MemStash
          command: |
            curl -H "Content-Type: text/plain" \
              -H "token: ${MEMSTASH_TOKEN}" --request PUT \
              --data "<< parameters.keyValue >>" https://api.memstash.io/values/<< parameters.keyName >>
          when: on_success
  retrieve-key-from-mem-stash:
    description: Retrieves a key stored in MemStash
    parameters:
      keyName:
        type: string
    steps:
      - run:
          name: Retrieve key from MemStash
          command: |
            echo 'export << parameters.keyName >>=$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/<< parameters.keyName >>)' >> $BASH_ENV

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    <<: *nodejs-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build:prod
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify: *slack-notify-job-fail

  build-backend:
    <<: *nodejs-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/dist/
            - project/backend/node_modules
      - slack/notify: *slack-notify-job-fail

  test-frontend:
    <<: *nodejs-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end unit tests
          command: |
            cd frontend
            npm run test
      - slack/notify: *slack-notify-job-fail
                
  test-backend:
    <<: *nodejs-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end unit tests
          command: |
            cd backend
            npm run test
      - slack/notify: *slack-notify-job-fail
            
  scan-frontend:
    <<: *nodejs-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan for vulnerable packages
          command: |
            cd frontend
            npm audit --audit-level=critical
      - slack/notify: *slack-notify-job-fail

  scan-backend:
    <<: *nodejs-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan for vulnerable packages
          command: |
            cd backend
            npm audit --audit-level=critical
      - slack/notify: *slack-notify-job-fail

  deploy-infrastructure:
    <<: *aws-cli
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
                  ImageID=${UBUNTU_AMI_ID} KeyName=${SSH_KEY_NAME} \
                  SSHCidrIp=${DEVELOPER_JUMPBOX_CIDR_IP} WebCidrIp=${WEB_CIDR_IP} \
                  DatabaseUsername=${TYPEORM_USERNAME} DatabasePassword=${TYPEORM_PASSWORD}
          no_output_timeout: 20m
      - save-key-to-mem-stash:
          keyName: BACKEND_PUBLIC_DNS_NAME
          keyValue: $(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --filter 'Name=tag:Name,Values=udapeople-backend' --output text)
      - save-key-to-mem-stash:
          keyName: TYPEORM_PORT
          keyValue: $(aws cloudformation list-exports --query "Exports[?Name==\`DatabasePort\`].Value" --no-paginate --output text)
      - save-key-to-mem-stash:
          keyName: TYPEORM_HOST
          keyValue: $(aws cloudformation list-exports --query "Exports[?Name==\`DatabaseHost\`].Value" --no-paginate --output text)
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Save latest workflow ID
          command: |
            touch workflow_id.txt
            aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text >> workflow_id.txt
      - run:
          name: Ensure cloudfront infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name udapeople-cloudfront \
            --parameter-overrides ID=s3-bucket-udapeople-${CIRCLE_WORKFLOW_ID:0:7}
          no_output_timeout: 20m
      - run:
          name: Create invalidation
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`DistributionID\`].Value" \
            --no-paginate --output text >> distribution_id.txt
            export DISTRIBUTION_ID=$(cat distribution_id.txt)
            aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
          when: on_success
      - retrieve-key-from-mem-stash:
          keyName: BACKEND_PUBLIC_DNS_NAME
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo $BACKEND_PUBLIC_DNS_NAME >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - workflow_id.txt
      - slack/notify: *slack-notify-deploy-fail
      - slack/notify: *slack-notify-deploy-success
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    <<: *default-image
    steps:
      - add_ssh_keys:
          fingerprints: ["ba:cf:19:36:76:06:84:e1:c6:bd:b3:96:c1:f1:d6:f4"]
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install gettext
          command: apk add --update gettext
      - run:
          name: Install Ansible
          command: apk add --update ansible
      - retrieve-key-from-mem-stash:
          keyName: TYPEORM_HOST
      - retrieve-key-from-mem-stash:
          keyName: TYPEORM_PORT
      - run:
          name: Configure server
          command: |
            envsubst < .circleci/ansible/roles/configure-server/files/.env.template > .circleci/ansible/roles/configure-server/files/.env
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    <<: *nodejs-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            if npm run migrations | grep "has been executed successfully"
            then
              echo 1 >> result.txt
            else
              echo 0 >> result.txt
            fi
      - save-key-to-mem-stash:
          keyName: MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
          keyValue: $(cat result.txt)
      - slack/notify: *slack-notify-job-fail
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    <<: *aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    <<: *default-image
    steps:
      - add_ssh_keys:
          fingerprints: ["ba:cf:19:36:76:06:84:e1:c6:bd:b3:96:c1:f1:d6:f4"]
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install gettext
          command: apk add --update gettext
      - run:
          name: Install Ansible
          command: apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            cp -R backend/dist .circleci/ansible/roles/deploy-backend/files
            cp -R backend/node_modules .circleci/ansible/roles/deploy-backend/files
            envsubst < .circleci/ansible/roles/deploy-backend/files/.env.template > .circleci/ansible/roles/deploy-backend/files/.env
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    <<: *alpine-image
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    <<: *default-image
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
    <<: *aws-cli
    steps:
      - install-dependencies
      - attach_workspace:
          at: ~/
      - run:
          name: delete old S3 bucket stack
          command: |
            export PIPELINE_ID=$(cat pipeline_id.txt)
            export BUCKET_EXISTS=$(aws s3 ls s3://${PIPELINE_ID} 2>&1 | grep -c 'index.html')
            echo "Deleting bucket: ${PIPELINE_ID}"
            if [ $BUCKET_EXISTS -eq 1 ]
            then
              aws s3 rm s3://${PIPELINE_ID} --recursive
              aws cloudformation delete-stack --stack-name "${PIPELINE_ID}"
              echo "Previous bucket have been deleted"
            else
              echo "No previous bucket to be deleted"
            fi
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]